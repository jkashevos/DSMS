// <auto-generated />
using DSMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DSMS.Data.Migrations
{
    [DbContext(typeof(DSMSDBContext))]
    partial class DSMSDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("DSMS.Data.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BookId");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("DSMS.Data.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("Isbn");

                    b.Property<string>("Notes");

                    b.Property<int>("PublisherId");

                    b.Property<string>("Summary");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("Updated");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("DSMS.Data.Models.CalendarEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CalendarDateTime");

                    b.Property<int>("CalendarEventType");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("CalendarEvents");
                });

            modelBuilder.Entity("DSMS.Data.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("Instruction");

                    b.Property<string>("Name");

                    b.Property<string>("Procedure");

                    b.Property<DateTime?>("Updated");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("DSMS.Data.Models.Chore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("Qty");

                    b.Property<DateTime?>("Updated");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("Chores");
                });

            modelBuilder.Entity("DSMS.Data.Models.Committee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation");

                    b.Property<string>("ChairmanId");

                    b.Property<string>("Charter");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("Name");

                    b.Property<string>("SecretaryId");

                    b.Property<string>("TreasurerId");

                    b.Property<DateTime?>("Updated");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ChairmanId");

                    b.HasIndex("SecretaryId");

                    b.HasIndex("TreasurerId");

                    b.ToTable("Committees");
                });

            modelBuilder.Entity("DSMS.Data.Models.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CaseNumber");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("Location");

                    b.Property<DateTime>("SubmitDate");

                    b.Property<DateTime?>("Updated");

                    b.Property<int>("Version");

                    b.Property<DateTime>("ViolationDate");

                    b.HasKey("Id");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("DSMS.Data.Models.Fine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTime?>("Created");

                    b.Property<DateTime>("FineDateTime");

                    b.Property<int>("FineReason");

                    b.Property<string>("Note");

                    b.Property<bool>("Paid");

                    b.Property<DateTime?>("PaidDateTime");

                    b.Property<string>("SchoolMeetingMemberId");

                    b.Property<DateTime?>("Updated");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("SchoolMeetingMemberId");

                    b.ToTable("Fines");
                });

            modelBuilder.Entity("DSMS.Data.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("DSMS.Data.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("SchoolMeetingMemberId");

                    b.Property<DateTime?>("Updated");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("SchoolMeetingMemberId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DSMS.Data.Models.SchoolMeetingMember", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("CertificationId");

                    b.Property<int?>("ComplaintId");

                    b.Property<int?>("ComplaintId1");

                    b.Property<int?>("ComplaintId2");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsStaff");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Phone");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("CertificationId");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("ComplaintId1");

                    b.HasIndex("ComplaintId2");

                    b.ToTable("SchoolMeetingMembers");
                });

            modelBuilder.Entity("DSMS.Data.Models.SelectedChore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CheckedBySmmId");

                    b.Property<DateTime?>("CheckedDateTime");

                    b.Property<int?>("ChoreId");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("SelectedBySmmId");

                    b.Property<DateTime>("SelectedDateTime");

                    b.Property<string>("TakenBySmmId");

                    b.Property<DateTime?>("TakenDateTime");

                    b.Property<DateTime?>("Updated");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("CheckedBySmmId");

                    b.HasIndex("ChoreId");

                    b.HasIndex("SelectedBySmmId");

                    b.HasIndex("TakenBySmmId");

                    b.ToTable("SelectedChores");
                });

            modelBuilder.Entity("DSMS.Data.Models.SystemEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<DateTime>("EventDateTime");

                    b.Property<DateTime?>("EventEndDateTime");

                    b.Property<DateTime?>("EventStartDateTime");

                    b.Property<int>("EventType");

                    b.Property<string>("Location");

                    b.Property<string>("Phone");

                    b.Property<string>("Reason");

                    b.Property<string>("SchoolMeetingMemberId");

                    b.Property<DateTime?>("Updated");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("SchoolMeetingMemberId");

                    b.ToTable("SystemEvents");
                });

            modelBuilder.Entity("DSMS.Data.Models.SystemMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("Message");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("Updated");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("SystemMessages");
                });

            modelBuilder.Entity("DSMS.Data.Models.SystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("Value");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("DSMS.Data.Models.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<double?>("ExpectedDuration");

                    b.Property<string>("Name");

                    b.Property<string>("ReasonForVisit");

                    b.Property<string>("ResponsiblePartyId");

                    b.Property<DateTime>("TimeIn");

                    b.Property<DateTime?>("TimeOut");

                    b.Property<DateTime?>("Updated");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ResponsiblePartyId");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("DSMS.Data.Models.Author", b =>
                {
                    b.HasOne("DSMS.Data.Models.Book")
                        .WithMany("Authors")
                        .HasForeignKey("BookId");
                });

            modelBuilder.Entity("DSMS.Data.Models.Book", b =>
                {
                    b.HasOne("DSMS.Data.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DSMS.Data.Models.Committee", b =>
                {
                    b.HasOne("DSMS.Data.Models.SchoolMeetingMember", "Chairman")
                        .WithMany()
                        .HasForeignKey("ChairmanId");

                    b.HasOne("DSMS.Data.Models.SchoolMeetingMember", "Secretary")
                        .WithMany()
                        .HasForeignKey("SecretaryId");

                    b.HasOne("DSMS.Data.Models.SchoolMeetingMember", "Treasurer")
                        .WithMany()
                        .HasForeignKey("TreasurerId");
                });

            modelBuilder.Entity("DSMS.Data.Models.Fine", b =>
                {
                    b.HasOne("DSMS.Data.Models.SchoolMeetingMember", "SchoolMeetingMember")
                        .WithMany("Fines")
                        .HasForeignKey("SchoolMeetingMemberId");
                });

            modelBuilder.Entity("DSMS.Data.Models.Role", b =>
                {
                    b.HasOne("DSMS.Data.Models.SchoolMeetingMember")
                        .WithMany("SchoolMeetingMemberRoles")
                        .HasForeignKey("SchoolMeetingMemberId");
                });

            modelBuilder.Entity("DSMS.Data.Models.SchoolMeetingMember", b =>
                {
                    b.HasOne("DSMS.Data.Models.Certification")
                        .WithMany("CertifiedMembers")
                        .HasForeignKey("CertificationId");

                    b.HasOne("DSMS.Data.Models.Complaint")
                        .WithMany("Complaintants")
                        .HasForeignKey("ComplaintId");

                    b.HasOne("DSMS.Data.Models.Complaint")
                        .WithMany("Violators")
                        .HasForeignKey("ComplaintId1");

                    b.HasOne("DSMS.Data.Models.Complaint")
                        .WithMany("Witnesses")
                        .HasForeignKey("ComplaintId2");
                });

            modelBuilder.Entity("DSMS.Data.Models.SelectedChore", b =>
                {
                    b.HasOne("DSMS.Data.Models.SchoolMeetingMember", "CheckedBySmm")
                        .WithMany()
                        .HasForeignKey("CheckedBySmmId");

                    b.HasOne("DSMS.Data.Models.Chore", "Chore")
                        .WithMany("SelectedChore")
                        .HasForeignKey("ChoreId");

                    b.HasOne("DSMS.Data.Models.SchoolMeetingMember", "SelectedBySmm")
                        .WithMany()
                        .HasForeignKey("SelectedBySmmId");

                    b.HasOne("DSMS.Data.Models.SchoolMeetingMember", "TakenBySmm")
                        .WithMany()
                        .HasForeignKey("TakenBySmmId");
                });

            modelBuilder.Entity("DSMS.Data.Models.SystemEvent", b =>
                {
                    b.HasOne("DSMS.Data.Models.SchoolMeetingMember", "SchoolMeetingMember")
                        .WithMany("SystemEvent")
                        .HasForeignKey("SchoolMeetingMemberId");
                });

            modelBuilder.Entity("DSMS.Data.Models.Visitor", b =>
                {
                    b.HasOne("DSMS.Data.Models.SchoolMeetingMember", "ResponsibleParty")
                        .WithMany()
                        .HasForeignKey("ResponsiblePartyId");
                });
#pragma warning restore 612, 618
        }
    }
}
